package conselho.api.service;

import conselho.api.model.UsuarioRoles;
import conselho.api.model.dto.mapper.TurmaMapper;
import conselho.api.model.dto.request.TurmaRequestDTO;
import conselho.api.model.dto.response.TurmaResponseDTO;
import conselho.api.model.dto.response.UsuarioResponseDTO;
import conselho.api.model.entity.Turma;
import conselho.api.repository.TurmaRepository;
import lombok.AllArgsConstructor;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.NoSuchElementException;
import java.util.UUID;

@Service
@AllArgsConstructor
public class TurmaService {

    private final TurmaRepository turmaRepository;
    private TurmaMapper mapper;

    public TurmaResponseDTO adicionarTurma(TurmaRequestDTO dto) {
        return mapper.toResponse(turmaRepository.save(mapper.toTurma(dto)));
    }

    public Turma buscarTurma(UUID uuid) {
        return (Turma) turmaRepository.findByUUID(uuid).orElseThrow(() -> new NoSuchElementException("Turma nÃ£o encontrada"));
    }

    public TurmaResponseDTO atualizarTurma(UUID uuid, TurmaRequestDTO dto) {
        return mapper.toResponse(turmaRepository.save(mapper.toTurma(dto)));
    }

    public TurmaResponseDTO buscarTurmaPorNome(String nome) {
        return (TurmaResponseDTO) turmaRepository.findByNomeTurma(nome).orElseThrow(() -> new NoSuchElementException("Turma nao encontrada"));
    }

    public TurmaResponseDTO buscarTurmaPorId(UUID uuid) {
        return mapper.toResponse(buscarTurma(uuid));
    }

    public Page<TurmaResponseDTO> findAll(Pageable pageable) {
        return mapper.toResponse(turmaRepository.findAll(pageable));
    }

    public void removerTurma(UUID uuid) {
        turmaRepository.deleteById(uuid);
    }

}
